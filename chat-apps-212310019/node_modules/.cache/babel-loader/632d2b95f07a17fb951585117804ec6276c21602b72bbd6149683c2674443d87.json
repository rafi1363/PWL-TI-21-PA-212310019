{"ast":null,"code":"var tokenize = require('./tokenize');\nvar languageProcessor = require('./language-processor');\n\n/**\n * Constructor\n * @param {Object} options - Instance options\n */\nvar Sentiment = function (options) {\n  this.options = options;\n};\n\n/**\n * Registers the specified language\n *\n * @param {String} languageCode\n *     - Two-digit code for the language to register\n * @param {Object} language\n *     - The language module to register\n */\nSentiment.prototype.registerLanguage = function (languageCode, language) {\n  languageProcessor.addLanguage(languageCode, language);\n};\n\n/**\n * Performs sentiment analysis on the provided input 'phrase'.\n *\n * @param {String} phrase\n *     - Input phrase\n * @param {Object} opts\n *     - Options\n * @param {Object} opts.language\n *     - Input language code (2 digit code), defaults to 'en'\n * @param {Object} opts.extras\n *     - Optional sentiment additions to AFINN (hash k/v pairs)\n * @param {function} callback\n *     - Optional callback\n * @return {Object}\n */\nSentiment.prototype.analyze = function (phrase, opts, callback) {\n  // Parse arguments\n  if (typeof phrase === 'undefined') phrase = '';\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  var languageCode = opts.language || 'en';\n  var labels = languageProcessor.getLabels(languageCode);\n\n  // Merge extra labels\n  if (typeof opts.extras === 'object') {\n    labels = Object.assign(labels, opts.extras);\n  }\n\n  // Storage objects\n  var tokens = tokenize(phrase),\n    score = 0,\n    words = [],\n    positive = [],\n    negative = [],\n    calculation = [];\n\n  // Iterate over tokens\n  var i = tokens.length;\n  while (i--) {\n    var obj = tokens[i];\n    if (!labels.hasOwnProperty(obj)) continue;\n    words.push(obj);\n\n    // Apply scoring strategy\n    var tokenScore = labels[obj];\n    // eslint-disable-next-line max-len\n    tokenScore = languageProcessor.applyScoringStrategy(languageCode, tokens, i, tokenScore);\n    if (tokenScore > 0) positive.push(obj);\n    if (tokenScore < 0) negative.push(obj);\n    score += tokenScore;\n    var zipObj = {};\n    // Calculations breakdown\n    zipObj[obj] = tokenScore;\n    calculation.push(zipObj);\n  }\n  var result = {\n    score: score,\n    comparative: tokens.length > 0 ? score / tokens.length : 0,\n    calculation: calculation,\n    tokens: tokens,\n    words: words,\n    positive: positive,\n    negative: negative\n  };\n\n  // Handle optional async interface\n  if (typeof callback === 'function') {\n    process.nextTick(function () {\n      callback(null, result);\n    });\n  } else {\n    return result;\n  }\n};\nmodule.exports = Sentiment;","map":{"version":3,"names":["tokenize","require","languageProcessor","Sentiment","options","prototype","registerLanguage","languageCode","language","addLanguage","analyze","phrase","opts","callback","labels","getLabels","extras","Object","assign","tokens","score","words","positive","negative","calculation","i","length","obj","hasOwnProperty","push","tokenScore","applyScoringStrategy","zipObj","result","comparative","process","nextTick","module","exports"],"sources":["D:/Document/PWL/Materi/chat-apps-212310019/node_modules/sentiment/lib/index.js"],"sourcesContent":["var tokenize = require('./tokenize');\nvar languageProcessor = require('./language-processor');\n\n/**\n * Constructor\n * @param {Object} options - Instance options\n */\nvar Sentiment = function (options) {\n    this.options = options;\n};\n\n/**\n * Registers the specified language\n *\n * @param {String} languageCode\n *     - Two-digit code for the language to register\n * @param {Object} language\n *     - The language module to register\n */\nSentiment.prototype.registerLanguage = function (languageCode, language) {\n    languageProcessor.addLanguage(languageCode, language);\n};\n\n/**\n * Performs sentiment analysis on the provided input 'phrase'.\n *\n * @param {String} phrase\n *     - Input phrase\n * @param {Object} opts\n *     - Options\n * @param {Object} opts.language\n *     - Input language code (2 digit code), defaults to 'en'\n * @param {Object} opts.extras\n *     - Optional sentiment additions to AFINN (hash k/v pairs)\n * @param {function} callback\n *     - Optional callback\n * @return {Object}\n */\nSentiment.prototype.analyze = function (phrase, opts, callback) {\n    // Parse arguments\n    if (typeof phrase === 'undefined') phrase = '';\n    if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n    }\n    opts = opts || {};\n\n    var languageCode = opts.language || 'en';\n    var labels = languageProcessor.getLabels(languageCode);\n\n    // Merge extra labels\n    if (typeof opts.extras === 'object') {\n        labels = Object.assign(labels, opts.extras);\n    }\n\n    // Storage objects\n    var tokens      = tokenize(phrase),\n        score       = 0,\n        words       = [],\n        positive    = [],\n        negative    = [],\n        calculation = [];\n\n    // Iterate over tokens\n    var i = tokens.length;\n    while (i--) {\n        var obj = tokens[i];\n        if (!labels.hasOwnProperty(obj)) continue;\n        words.push(obj);\n\n        // Apply scoring strategy\n        var tokenScore = labels[obj];\n        // eslint-disable-next-line max-len\n        tokenScore = languageProcessor.applyScoringStrategy(languageCode, tokens, i, tokenScore);\n        if (tokenScore > 0) positive.push(obj);\n        if (tokenScore < 0) negative.push(obj);\n        score += tokenScore;\n        \n        var zipObj = {}; \n        // Calculations breakdown\n        zipObj[obj] = tokenScore;\n        calculation.push(zipObj);\n    }\n\n    var result = {\n        score:          score,\n        comparative:    tokens.length > 0 ? score / tokens.length : 0,\n        calculation:    calculation,\n        tokens:         tokens,\n        words:          words,\n        positive:       positive,\n        negative:       negative\n    };\n\n    // Handle optional async interface\n    if (typeof callback === 'function') {\n        process.nextTick(function () {\n            callback(null, result);\n        });\n    } else {\n        return result;\n    }\n};\n\nmodule.exports = Sentiment;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}